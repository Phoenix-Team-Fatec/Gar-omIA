# -*- coding: utf-8 -*-
"""GarçomIA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XVMV1g-id-dNIZKTOOU25R7AfgLIXw0T
"""

!pip install pyTelegramBotAPI
!pip install git+https://github.com/openai/whisper.git
!pip install torch
!pip install gtts
!pip install spacy

import spacy
from spacy.matcher import Matcher
import telebot
import whisper
import os
from gtts import gTTS


# Iniciando o bot e o modelo Whisper
bot = telebot.TeleBot("seutoken")


# Inicializando o modelo spaCy e Whisper
nlp = spacy.blank("pt")  # Carrega um modelo básico de português
model = whisper.load_model("base")  # Modelo Whisper para transcrição de áudio

# Configurando o diretório para salvar os áudios recebidos
AUDIO_DIR = "/content/audio_files/"
os.makedirs(AUDIO_DIR, exist_ok=True)


# Cardápio com itens disponíveis, seus tipos e preços
menu = {
    1: {"nome": "Arroz", "tipo": "Prato Principal", "valor": 12.00},
    2: {"nome": "Frango", "tipo": "Prato Principal", "valor": 15.00},
    3: {"nome": "Salada", "tipo": "Prato Principal", "valor": 10.00},
    4: {"nome": "Lasanha", "tipo": "Prato Principal", "valor": 18.00},
    5: {"nome": "Suco", "tipo": "Bebida", "valor": 5.00},
    6: {"nome": "Refrigerante", "tipo": "Bebida", "valor": 4.00},
    7: {"nome": "Água", "tipo": "Bebida", "valor": 2.50},
    8: {"nome": "Pudim", "tipo": "Sobremesa", "valor": 6.00},
    9: {"nome": "Doce de Maracujá", "tipo": "Sobremesa", "valor": 5.50},
    10: {"nome": "Bolo de Chocolate", "tipo": "Sobremesa", "valor": 7.00}
}


# Variável de controle para determinar a etapa do fluxo
etapa = 1  # Começa na etapa 1 (ver cardápio)
tamanho = "p"  # Tamanho padrão da marmita (pequena)

# Lista para armazenar os itens do pedido do cliente
itens_cliente = []


# Função para criar um item do pedido
def criar_item(nome, tipo, valor, quantidade=1):
    return {'nome': nome, 'tipo': tipo, 'valor': valor, 'quantidade': quantidade, 'valor_final': valor * quantidade}


# Função para adicionar itens ao pedido com base no texto do usuário
def adicionar_itens_nomes(texto_usuario):
    itens_encontrados = []
    for item_id, item_info in menu.items():
        if item_info['nome'].lower() in texto_usuario:  # Verifica se o nome do item está no texto
            item = criar_item(item_info['nome'], item_info['tipo'], item_info['valor'])
            itens_cliente.append(item)  # Adiciona o item ao pedido
            itens_encontrados.append(item_info['nome'])  # Salva o nome do item encontrado
    return itens_encontrados


# Função para calcular o preço total do pedido
def calcular_preco():
    return sum(item['valor_final'] for item in itens_cliente)


# Função para aplicar ajuste de preço com base no tamanho da marmita
def verifica_tamanho(preco, tamanho):
    tamanhos_validos = {"g": 1.25, "m": 1.15, "p": 1.05}  # Fatores de ajuste para cada tamanho
    return preco * tamanhos_validos.get(tamanho.lower(), 1)

print(verifica_tamanho(10, "g"))
print(verifica_tamanho(10, "m"))
print(verifica_tamanho(10, "p"))
print(verifica_tamanho(10, "amfdakofnja"))



# Função para remover um item do pedido
def remover_item(nome_item):
    global itens_cliente
    itens_cliente = [item for item in itens_cliente if item['nome'].lower() != nome_item.lower()]  # Remove o item pelo nome
    resumo_atualizado = resumo_pedido()
    novo_total = calcular_preco()
    return (f"Item '{nome_item}' foi removido do seu pedido.\n"
            f"{resumo_atualizado}\n"
            f"Novo total do pedido: R${novo_total:.2f}.")


# Função para exibir o resumo do pedido
def resumo_pedido():
    if not itens_cliente:  # Verifica se a lista está vazia
        return "Seu pedido está vazio no momento."
    return "Aqui está o resumo do seu pedido:\n" + "\n".join(
        [f"{item['nome']} custa R${item['valor']:.2f}" for item in itens_cliente]
    )


# Função para converter texto em áudio e salvar no disco
def texto_para_voz(texto, file_path="resposta.mp3"):
    if not texto:  # Retorna None se o texto estiver vazio
        return None
    tts = gTTS(text=texto, lang='pt')  # Converte o texto em áudio
    tts.save(file_path)
    return file_path

# Função para lidar com mensagens de voz recebidas pelo bot
@bot.message_handler(content_types=['voice'])
def handle_voice_message(message):
    global etapa, tamanho  # Referência global para as variáveis de etapa e tamanho
    file_info = bot.get_file(message.voice.file_id)  # Obtém informações sobre o arquivo de áudio
    file = bot.download_file(file_info.file_path)  # Faz o download do áudio

    # Salva o arquivo de áudio em um diretório local
    audio_path = os.path.join(AUDIO_DIR, f"{message.voice.file_id}.ogg")
    with open(audio_path, 'wb') as f:
        f.write(file)

    # Transcreve o áudio usando Whisper com o idioma português
    result = model.transcribe(audio_path, language="pt")
    texto_usuario = result['text'].lower()
    transcricao = f"MENSAGEM DO USUÁRIO: {texto_usuario}\n"

    # Variável para armazenar a resposta do bot
    resposta = ""

    # Opção de voltar para a etapa anterior
    if "voltar" in texto_usuario:
        etapa = max(1, etapa - 1)  # Garante que a etapa não seja menor que 1
        resposta = f"Você voltou para a etapa {etapa}. Vamos reiniciar essa etapa."
        transcricao += f"MENSAGEM DO BOT: Voltando para a etapa {etapa}.\n"

    # Controle de etapas
    if etapa == 1:  # Etapa 1 - Ver o cardápio
        resposta += "Bem-vindo à etapa 1: Visualizar o cardápio.\n"
        if "cardápio" in texto_usuario or "menu" in texto_usuario:
            resposta += "Aqui está o nosso cardápio:\n" + "\n".join(
                [f"{k}. {v['nome']} - R${v['valor']}" for k, v in menu.items()]
            )
            transcricao += "MENSAGEM DO BOT: Mostrando o cardápio.\n"
            etapa = 2  # Avança para a próxima etapa
            resposta += "\nAgora, escolha os itens do seu pedido falando o nome dos itens."
        else:
            resposta += "Por favor, peça para ver o cardápio para começar."

    elif etapa == 2:  # Etapa 2 - Fazer pedido
        resposta += "Estamos na etapa 2: Escolher os itens do pedido.\n"
        if "gostaria" in texto_usuario or "quero" in texto_usuario:
            itens_adicionados = adicionar_itens_nomes(texto_usuario)
            if itens_adicionados:
                resposta += f"Itens adicionados ao seu pedido: {', '.join(itens_adicionados)}."
                transcricao += f"MENSAGEM DO BOT: Itens {', '.join(itens_adicionados)} adicionados ao pedido.\n"
                etapa = 3  # Avança para a próxima etapa
                resposta += "\nPara ver, adicionar ou remover itens do pedido, diga 'ver pedido' ou 'remover'."
            else:
                resposta += "Não encontrei o item solicitado no cardápio. Verifique o nome e tente novamente."
        else:
            resposta += "Escolha os itens que deseja pedir dizendo o nome deles."

    elif etapa == 3:  # Etapa 3 - Ver pedido, remover ou adicionar
        resposta += "Estamos na etapa 3: Ajustar o pedido.\n"
        if "ver pedido" in texto_usuario or "resumo" in texto_usuario:
            resposta += resumo_pedido()
            transcricao += "MENSAGEM DO BOT: Exibindo o resumo do pedido.\n"
            resposta += "\nVocê pode adicionar mais itens ou remover algum dizendo 'remover [nome do item]'. Quando estiver satisfeito, diga 'avançar' para continuar."

        elif "remover" in texto_usuario:
            nome_item = texto_usuario.split("remover", 1)[1].strip()  # Extrai o nome do item para remover
            resposta += remover_item(nome_item)
            transcricao += f"MENSAGEM DO BOT: {resposta}\n"

        elif "avançar" in texto_usuario:
            etapa = 4  # Avança para a etapa seguinte
            resposta += "Agora, escolha o tamanho da marmita dizendo 'grande', 'médio' ou 'pequeno'."

    elif etapa == 4:  # Etapa 4 - Informar tamanho da marmita
        resposta += "Estamos na etapa 4: Escolher o tamanho da marmita.\n"
        if "grande" in texto_usuario or "medio" in texto_usuario or "pequeno" in texto_usuario:
            tamanho = next((palavra[0].lower() for palavra in ["grande", "medio", "pequena"] if palavra in texto_usuario), "p")
            resposta += f"Tamanho da marmita ajustado para {tamanho.upper()}."
            transcricao += f"MENSAGEM DO BOT: Tamanho ajustado para {tamanho.upper()}.\n"
            etapa = 5  # Avança para a próxima etapa
            resposta += "\nPor favor, informe o endereço de entrega."
        else:
            resposta += "Escolha o tamanho da marmita dizendo 'grande', 'médio' ou 'pequeno'."

    elif etapa == 5:  # Etapa 5 - Finalizar pedido com endereço e valor total
        resposta += "Estamos na etapa 5: Informar endereço.\n"
        preco_total = calcular_preco()  # Calcula o valor base do pedido
        preco_final = verifica_tamanho(preco_total, tamanho)  # Aplica o ajuste pelo tamanho da marmita
        resposta += (f"Endereço recebido: {texto_usuario}.\n"
                     f"O valor total do pedido é R${preco_final:.2f}.\n"
                     f"Obrigado pelo pedido! Aguarde o nosso contato para mais detalhes.")
        transcricao += (f"MENSAGEM DO BOT: Endereço registrado: {texto_usuario}.\n"
                        f"Valor final do pedido: R${preco_final:.2f}.\n")
        etapa = 1  # Reinicia o processo para um novo pedido

    # Enviar transcrição e resposta em áudio
    bot.send_message(message.chat.id, transcricao)

    # Converter resposta em áudio e enviar
    if resposta:
        resposta_audio = texto_para_voz(resposta)
        if resposta_audio:
            with open(resposta_audio, 'rb') as audio:
                bot.send_voice(message.chat.id, audio)

# Inicia o bot e aguarda mensagens
bot.polling()